// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CineCordobaWebApi.Models;

public partial class CineCordobaDBContext : DbContext
{
    public CineCordobaDBContext(DbContextOptions<CineCordobaDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Boleteria> Boleterias { get; set; }

    public virtual DbSet<ButacasSala> ButacasSalas { get; set; }

    public virtual DbSet<Clasificacione> Clasificaciones { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<DetallesFactura> DetallesFacturas { get; set; }

    public virtual DbSet<Directore> Directores { get; set; }

    public virtual DbSet<EstadosReserva> EstadosReservas { get; set; }

    public virtual DbSet<Factura> Facturas { get; set; }

    public virtual DbSet<FormasPago> FormasPagos { get; set; }

    public virtual DbSet<Funcione> Funciones { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<GenerosPelicula> GenerosPeliculas { get; set; }

    public virtual DbSet<Lenguaje> Lenguajes { get; set; }

    public virtual DbSet<Paise> Paises { get; set; }

    public virtual DbSet<Pelicula> Peliculas { get; set; }

    public virtual DbSet<Promocione> Promociones { get; set; }

    public virtual DbSet<Reserva> Reservas { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Sala> Salas { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TiposEstado> TiposEstados { get; set; }

    public virtual DbSet<TiposSala> TiposSalas { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Boleteria>(entity =>
        {
            entity.HasKey(e => e.IdBoleteria).HasName("pk_boleterias");

            entity.ToTable("BOLETERIAS");

            entity.Property(e => e.IdBoleteria).HasColumnName("id_boleteria");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<ButacasSala>(entity =>
        {
            entity.HasKey(e => e.IdButacaSala).HasName("pk_butacas");

            entity.ToTable("BUTACAS_SALAS");

            entity.Property(e => e.IdButacaSala).HasColumnName("id_butaca_sala");
            entity.Property(e => e.Fila)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fila");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.NroButaca).HasColumnName("nro_butaca");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.ButacasSalas)
                .HasForeignKey(d => d.IdSala)
                .HasConstraintName("fk_butacas_salas");
        });

        modelBuilder.Entity<Clasificacione>(entity =>
        {
            entity.HasKey(e => e.IdClasificacion).HasName("pk_clasificaciones");

            entity.ToTable("CLASIFICACIONES");

            entity.Property(e => e.IdClasificacion).HasColumnName("id_clasificacion");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("pk_clientes");

            entity.ToTable("CLIENTES");

            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Documento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FechaNac)
                .HasColumnType("datetime")
                .HasColumnName("fecha_nac");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("telefono");
        });

        modelBuilder.Entity<DetallesFactura>(entity =>
        {
            entity.HasKey(e => e.IdDetFact).HasName("pk_detalles_facturas");

            entity.ToTable("DETALLES_FACTURAS");

            entity.Property(e => e.IdDetFact).HasColumnName("id_det_fact");
            entity.Property(e => e.CantEntrada).HasColumnName("cant_entrada");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio_unitario");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.IdFuncion)
                .HasConstraintName("fk_detalles_facturas_funciones");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.IdPelicula)
                .HasConstraintName("fk_detalles_facturas_peliculas");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.IdSala)
                .HasConstraintName("fk_detalles_facturas_salas");

            entity.HasOne(d => d.NroFacturaNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.NroFactura)
                .HasConstraintName("fk_detalles_facturas_facturas");
        });

        modelBuilder.Entity<Directore>(entity =>
        {
            entity.HasKey(e => e.IdDirector).HasName("pk_director");

            entity.ToTable("DIRECTORES");

            entity.Property(e => e.IdDirector).HasColumnName("id_director");
            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<EstadosReserva>(entity =>
        {
            entity.HasKey(e => e.IdEstadoReserva).HasName("pk_estados_reservas");

            entity.ToTable("ESTADOS_RESERVAS");

            entity.Property(e => e.IdEstadoReserva).HasColumnName("id_estado_reserva");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Factura>(entity =>
        {
            entity.HasKey(e => e.NroFactura).HasName("pk_facturas");

            entity.ToTable("FACTURAS");

            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");
            entity.Property(e => e.FechaCompra)
                .HasColumnType("datetime")
                .HasColumnName("fecha_compra");
            entity.Property(e => e.IdBoleteria).HasColumnName("id_boleteria");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");

            entity.HasOne(d => d.IdBoleteriaNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdBoleteria)
                .HasConstraintName("pk_facturas_boleterias");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_facturas_clientes");

            entity.HasOne(d => d.IdFormaPagoNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdFormaPago)
                .HasConstraintName("pk_facturas_formas_pago");
        });

        modelBuilder.Entity<FormasPago>(entity =>
        {
            entity.HasKey(e => e.IdFormaPago).HasName("pk_formas_pagos");

            entity.ToTable("FORMAS_PAGO");

            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Funcione>(entity =>
        {
            entity.HasKey(e => e.IdFuncion).HasName("pk_funciones");

            entity.ToTable("FUNCIONES");

            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.Hora).HasColumnName("hora");
            entity.Property(e => e.IdLenguaje).HasColumnName("id_lenguaje");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.Subtitulos).HasColumnName("subtitulos");

            entity.HasOne(d => d.IdLenguajeNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdLenguaje)
                .HasConstraintName("fk_funciones_lenguajes");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdPelicula)
                .HasConstraintName("fk_funciones_peliculas");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdSala)
                .HasConstraintName("fk_funciones_salas");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.HasKey(e => e.IdGenero).HasName("pk_generos");

            entity.ToTable("GENEROS");

            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<GenerosPelicula>(entity =>
        {
            entity.HasKey(e => e.IdGeneroPelicula).HasName("pk_generos_peliculas");

            entity.ToTable("GENEROS_PELICULAS");

            entity.Property(e => e.IdGeneroPelicula).HasColumnName("id_genero_pelicula");
            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.GenerosPeliculas)
                .HasForeignKey(d => d.IdGenero)
                .HasConstraintName("fk_generos_peliculas_generos");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.GenerosPeliculas)
                .HasForeignKey(d => d.IdPelicula)
                .HasConstraintName("fk_generos_peliculas_peliculas");
        });

        modelBuilder.Entity<Lenguaje>(entity =>
        {
            entity.HasKey(e => e.IdLenguaje).HasName("pk_lenguajes");

            entity.ToTable("LENGUAJES");

            entity.Property(e => e.IdLenguaje).HasColumnName("id_lenguaje");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Paise>(entity =>
        {
            entity.HasKey(e => e.IdPais).HasName("pk_paises");

            entity.ToTable("PAISES");

            entity.Property(e => e.IdPais).HasColumnName("id_pais");
            entity.Property(e => e.Pais)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pais");
        });

        modelBuilder.Entity<Pelicula>(entity =>
        {
            entity.HasKey(e => e.IdPelicula).HasName("pk_peliculas");

            entity.ToTable("PELICULAS");

            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.DuracionMin).HasColumnName("duracion_min");
            entity.Property(e => e.IdClasificacion).HasColumnName("id_clasificacion");
            entity.Property(e => e.IdDirector).HasColumnName("id_director");
            entity.Property(e => e.IdEstado).HasColumnName("id_estado");
            entity.Property(e => e.IdPais).HasColumnName("id_pais");
            entity.Property(e => e.TituloPelicula)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("titulo_pelicula");

            entity.HasOne(d => d.IdClasificacionNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdClasificacion)
                .HasConstraintName("fk_peliculas_clasificaciones");

            entity.HasOne(d => d.IdDirectorNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdDirector)
                .HasConstraintName("fk_peliculas_directores");

            entity.HasOne(d => d.IdEstadoNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdEstado)
                .HasConstraintName("fk_peliculas_tipos_estafo");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdPais)
                .HasConstraintName("fk_peliculas_paises");
        });

        modelBuilder.Entity<Promocione>(entity =>
        {
            entity.HasKey(e => e.IdPromocion).HasName("pk_promociones");

            entity.ToTable("PROMOCIONES");

            entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.DiasAplicados)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dias_aplicados");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("porcentaje");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.Promociones)
                .HasForeignKey(d => d.IdFuncion)
                .HasConstraintName("fk_promociones_funciones");
        });

        modelBuilder.Entity<Reserva>(entity =>
        {
            entity.HasKey(e => e.IdReserva).HasName("pk_reservas");

            entity.ToTable("RESERVAS");

            entity.Property(e => e.IdReserva).HasColumnName("id_reserva");
            entity.Property(e => e.FechaReserva)
                .HasColumnType("datetime")
                .HasColumnName("fecha_reserva");
            entity.Property(e => e.HoraReserva).HasColumnName("hora_reserva");
            entity.Property(e => e.IdButacaSala).HasColumnName("id_butaca_sala");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdEstadoReserva).HasColumnName("id_estado_reserva");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");

            entity.HasOne(d => d.IdButacaSalaNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdButacaSala)
                .HasConstraintName("fk_reservas_butacas_salas");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_reservas_clientes");

            entity.HasOne(d => d.IdEstadoReservaNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdEstadoReserva)
                .HasConstraintName("fk_reservas_estados_reservas");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdFuncion)
                .HasConstraintName("fk_reservas_funciones");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.IdRol).HasName("pk_roles");

            entity.ToTable("ROLES");

            entity.Property(e => e.IdRol).HasColumnName("id_rol");
            entity.Property(e => e.RolNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rol_nombre");
        });

        modelBuilder.Entity<Sala>(entity =>
        {
            entity.HasKey(e => e.IdSala).HasName("pk_salas");

            entity.ToTable("SALAS");

            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.Capacidad).HasColumnName("capacidad");
            entity.Property(e => e.IdTipoSala).HasColumnName("id_tipo_sala");
            entity.Property(e => e.NombreSala)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_sala");

            entity.HasOne(d => d.IdTipoSalaNavigation).WithMany(p => p.Salas)
                .HasForeignKey(d => d.IdTipoSala)
                .HasConstraintName("fk_salas_tipos");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => e.NroTicket).HasName("pk_tickets");

            entity.ToTable("TICKETS");

            entity.Property(e => e.NroTicket).HasColumnName("nro_ticket");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.Hora).HasColumnName("hora");
            entity.Property(e => e.IdButacaSala).HasColumnName("id_butaca_sala");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.IdButacaSalaNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.IdButacaSala)
                .HasConstraintName("fk_tickets_butacas_salas");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.IdFuncion)
                .HasConstraintName("fk_tickets_funciones");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.IdPelicula)
                .HasConstraintName("fk_tickets_peliculas");

            entity.HasOne(d => d.NroFacturaNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.NroFactura)
                .HasConstraintName("fk_tickets_facturas");
        });

        modelBuilder.Entity<TiposEstado>(entity =>
        {
            entity.HasKey(e => e.IdEstado).HasName("pk_tipos_estado");

            entity.ToTable("TIPOS_ESTADO");

            entity.Property(e => e.IdEstado).HasColumnName("id_estado");
            entity.Property(e => e.Estado)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("estado");
        });

        modelBuilder.Entity<TiposSala>(entity =>
        {
            entity.HasKey(e => e.IdTipoSala).HasName("pk_tipos_salas");

            entity.ToTable("TIPOS_SALAS");

            entity.Property(e => e.IdTipoSala).HasColumnName("id_tipo_sala");
            entity.Property(e => e.TipoSala)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_sala");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("pk_usuarios");

            entity.ToTable("USUARIOS");

            entity.HasIndex(e => e.Username, "UQ__USUARIOS__F3DBC5727EA64357").IsUnique();

            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdRol).HasColumnName("id_rol");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password_hash");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("username");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_usuarios_clientes");

            entity.HasOne(d => d.IdRolNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdRol)
                .HasConstraintName("fk_usuarios_roles");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}